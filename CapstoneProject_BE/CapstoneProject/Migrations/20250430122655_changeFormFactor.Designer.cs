// <auto-generated />
using System;
using CapstoneProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CapstoneProject.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250430122655_changeFormFactor")]
    partial class changeFormFactor
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CapstoneProject.Models.Auth.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8D4568F8-6945-4F04-8F6A-91641968BE13",
                            ConcurrencyStamp = "8D4568F8-6945-4F04-8F6A-91641968BE13",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "4992905D-7E33-49CE-9A27-D973E01E96E1",
                            ConcurrencyStamp = "4992905D-7E33-49CE-9A27-D973E01E96E1",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        },
                        new
                        {
                            Id = "51736DED-179A-415D-80EF-7129869E932E",
                            ConcurrencyStamp = "51736DED-179A-415D-80EF-7129869E932E",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("CapstoneProject.Models.Auth.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateOnly>("RegisteredAt")
                        .HasColumnType("date");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CapstoneProject.Models.Auth.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("CapstoneProject.Models.Build", b =>
                {
                    b.Property<Guid>("BuildId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CpuCoolerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CpuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("GpuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MotherboardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("PowerSupplyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("RequiredWattage")
                        .HasColumnType("int");

                    b.Property<Guid?>("StorageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("BuildId");

                    b.HasIndex("CaseId");

                    b.HasIndex("CpuCoolerId");

                    b.HasIndex("CpuId");

                    b.HasIndex("GpuId");

                    b.HasIndex("MotherboardId");

                    b.HasIndex("PowerSupplyId");

                    b.HasIndex("RamId");

                    b.HasIndex("StorageId");

                    b.ToTable("Builds");
                });

            modelBuilder.Entity("CapstoneProject.Models.Components.Case", b =>
                {
                    b.Property<Guid>("CaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("FanSupportCount")
                        .HasColumnType("int");

                    b.Property<int>("FormFactorId")
                        .HasColumnType("int");

                    b.Property<bool?>("HasGlassPanel")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal>("Price")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<int?>("ReleaseYear")
                        .HasColumnType("int");

                    b.HasKey("CaseId");

                    b.HasIndex("FormFactorId");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("CapstoneProject.Models.Components.Cpu", b =>
                {
                    b.Property<Guid>("CpuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BaseClock")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("BoostClock")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("Cores")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IntegratedGraphics")
                        .HasColumnType("bit");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal>("Price")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("int");

                    b.Property<int>("SocketId")
                        .HasColumnType("int");

                    b.Property<int>("Tdp")
                        .HasColumnType("int");

                    b.Property<int>("Threads")
                        .HasColumnType("int");

                    b.HasKey("CpuId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("SocketId");

                    b.ToTable("Cpus");
                });

            modelBuilder.Entity("CapstoneProject.Models.Components.CpuCooler", b =>
                {
                    b.Property<Guid>("CpuCoolerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal>("Price")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("Tdp")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("CpuCoolerId");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("CpuCoolers");
                });

            modelBuilder.Entity("CapstoneProject.Models.Components.Gpu", b =>
                {
                    b.Property<Guid>("GpuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Chipset")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PcieVersion")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("Price")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<int?>("ReleaseYear")
                        .HasColumnType("int");

                    b.Property<int>("Tdp")
                        .HasColumnType("int");

                    b.Property<int>("Vram")
                        .HasColumnType("int");

                    b.HasKey("GpuId");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Gpus");
                });

            modelBuilder.Entity("CapstoneProject.Models.Components.Motherboard", b =>
                {
                    b.Property<Guid>("MotherboardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Chipset")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FormFactorId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("M2Slots")
                        .HasColumnType("int");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<int>("MaxRam")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("PcieSlots")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("RamSlots")
                        .HasColumnType("int");

                    b.Property<int>("RamTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("int");

                    b.Property<int>("SocketId")
                        .HasColumnType("int");

                    b.Property<bool>("WifiIncluded")
                        .HasColumnType("bit");

                    b.HasKey("MotherboardId");

                    b.HasIndex("FormFactorId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("RamTypeId");

                    b.HasIndex("SocketId");

                    b.ToTable("Motherboards");
                });

            modelBuilder.Entity("CapstoneProject.Models.Components.PowerSupply", b =>
                {
                    b.Property<Guid>("PowerSupplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("EfficiencyRating")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<bool?>("Modular")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal>("Price")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<int?>("ReleaseYear")
                        .HasColumnType("int");

                    b.Property<int>("Wattage")
                        .HasColumnType("int");

                    b.HasKey("PowerSupplyId");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("PowerSupplies");
                });

            modelBuilder.Entity("CapstoneProject.Models.Components.Ram", b =>
                {
                    b.Property<Guid>("RamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<int>("Modules")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal>("Price")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("RamTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ReleaseYear")
                        .HasColumnType("int");

                    b.Property<int>("Speed")
                        .HasColumnType("int");

                    b.HasKey("RamId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("RamTypeId");

                    b.ToTable("Rams");
                });

            modelBuilder.Entity("CapstoneProject.Models.Components.Storage", b =>
                {
                    b.Property<Guid>("StorageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FormFactor")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Interface")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool?>("NvmeSupport")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<int?>("ReleaseYear")
                        .HasColumnType("int");

                    b.Property<int>("StorageTypeId")
                        .HasColumnType("int");

                    b.HasKey("StorageId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("StorageTypeId");

                    b.ToTable("Storages");
                });

            modelBuilder.Entity("CapstoneProject.Models.SharedBuild", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserBuildId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserBuildId");

                    b.ToTable("SharedBuilds");
                });

            modelBuilder.Entity("CapstoneProject.Models.SupportTables.CpuCoolerSocket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CpuCoolerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SocketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CpuCoolerId");

                    b.HasIndex("SocketId");

                    b.ToTable("CpuCoolerSockets");
                });

            modelBuilder.Entity("CapstoneProject.Models.SupportTables.FormFactor", b =>
                {
                    b.Property<int>("FormFactorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FormFactorId"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("FormFactorId");

                    b.ToTable("FormFactors");

                    b.HasData(
                        new
                        {
                            FormFactorId = 1,
                            Name = "E-ATX"
                        },
                        new
                        {
                            FormFactorId = 2,
                            Name = "ATX"
                        },
                        new
                        {
                            FormFactorId = 3,
                            Name = "Micro-ATX"
                        },
                        new
                        {
                            FormFactorId = 4,
                            Name = "Mini-ITX"
                        });
                });

            modelBuilder.Entity("CapstoneProject.Models.SupportTables.Manufacturer", b =>
                {
                    b.Property<int>("ManufacturerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManufacturerId"));

                    b.Property<string>("Categories")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ManufacturerId");

                    b.ToTable("Manufacturers");

                    b.HasData(
                        new
                        {
                            ManufacturerId = 1,
                            Categories = "cpu,motherboard",
                            Name = "Intel"
                        },
                        new
                        {
                            ManufacturerId = 2,
                            Categories = "cpu,gpu",
                            Name = "AMD"
                        },
                        new
                        {
                            ManufacturerId = 3,
                            Categories = "gpu",
                            Name = "NVIDIA"
                        },
                        new
                        {
                            ManufacturerId = 4,
                            Categories = "ram,cooler,powersupply,case",
                            Name = "Corsair"
                        },
                        new
                        {
                            ManufacturerId = 5,
                            Categories = "gpu,motherboard,powersupply",
                            Name = "MSI"
                        },
                        new
                        {
                            ManufacturerId = 6,
                            Categories = "gpu,motherboard,cooler",
                            Name = "ASUS"
                        },
                        new
                        {
                            ManufacturerId = 7,
                            Categories = "gpu,motherboard,powersupply",
                            Name = "Gigabyte"
                        },
                        new
                        {
                            ManufacturerId = 8,
                            Categories = "cooler,case,powersupply",
                            Name = "Cooler Master"
                        },
                        new
                        {
                            ManufacturerId = 9,
                            Categories = "storage",
                            Name = "Western Digital"
                        },
                        new
                        {
                            ManufacturerId = 10,
                            Categories = "storage",
                            Name = "Seagate"
                        },
                        new
                        {
                            ManufacturerId = 11,
                            Categories = "cooler",
                            Name = "Noctua"
                        },
                        new
                        {
                            ManufacturerId = 12,
                            Categories = "ram",
                            Name = "G.Skill"
                        },
                        new
                        {
                            ManufacturerId = 13,
                            Categories = "ram,storage",
                            Name = "Kingston"
                        },
                        new
                        {
                            ManufacturerId = 14,
                            Categories = "ram,storage",
                            Name = "ADATA"
                        },
                        new
                        {
                            ManufacturerId = 15,
                            Categories = "ram,storage",
                            Name = "Crucial"
                        },
                        new
                        {
                            ManufacturerId = 16,
                            Categories = "gpu,powersupply",
                            Name = "EVGA"
                        },
                        new
                        {
                            ManufacturerId = 17,
                            Categories = "case,cooler,powersupply",
                            Name = "Thermaltake"
                        },
                        new
                        {
                            ManufacturerId = 18,
                            Categories = "case,cooler",
                            Name = "NZXT"
                        },
                        new
                        {
                            ManufacturerId = 19,
                            Categories = "case,powersupply",
                            Name = "Fractal Design"
                        },
                        new
                        {
                            ManufacturerId = 20,
                            Categories = "cooler,powersupply,case",
                            Name = "Be Quiet!"
                        },
                        new
                        {
                            ManufacturerId = 21,
                            Categories = "ram,storage",
                            Name = "TeamGroup"
                        },
                        new
                        {
                            ManufacturerId = 22,
                            Categories = "storage,ram",
                            Name = "Samsung"
                        },
                        new
                        {
                            ManufacturerId = 23,
                            Categories = "ram",
                            Name = "Patriot"
                        },
                        new
                        {
                            ManufacturerId = 24,
                            Categories = "storage",
                            Name = "Inland"
                        },
                        new
                        {
                            ManufacturerId = 25,
                            Categories = "motherboard",
                            Name = "ASRock"
                        },
                        new
                        {
                            ManufacturerId = 26,
                            Categories = "motherboard",
                            Name = "Biostar"
                        },
                        new
                        {
                            ManufacturerId = 27,
                            Categories = "case",
                            Name = "Lian Li"
                        },
                        new
                        {
                            ManufacturerId = 28,
                            Categories = "case,cooler",
                            Name = "Phanteks"
                        },
                        new
                        {
                            ManufacturerId = 29,
                            Categories = "ram,storage",
                            Name = "XPG"
                        },
                        new
                        {
                            ManufacturerId = 30,
                            Categories = "case,powersupply",
                            Name = "SilverStone"
                        },
                        new
                        {
                            ManufacturerId = 31,
                            Categories = "gpu",
                            Name = "Zotac"
                        },
                        new
                        {
                            ManufacturerId = 32,
                            Categories = "gpu",
                            Name = "Palit"
                        },
                        new
                        {
                            ManufacturerId = 33,
                            Categories = "gpu,storage",
                            Name = "PNY"
                        },
                        new
                        {
                            ManufacturerId = 34,
                            Categories = "gpu,motherboard",
                            Name = "Colorful"
                        },
                        new
                        {
                            ManufacturerId = 35,
                            Categories = "gpu",
                            Name = "XFX"
                        },
                        new
                        {
                            ManufacturerId = 36,
                            Categories = "gpu",
                            Name = "PowerColor"
                        },
                        new
                        {
                            ManufacturerId = 37,
                            Categories = "gpu",
                            Name = "Sapphire"
                        },
                        new
                        {
                            ManufacturerId = 38,
                            Categories = "ram,storage",
                            Name = "Apacer"
                        },
                        new
                        {
                            ManufacturerId = 39,
                            Categories = "storage,ram",
                            Name = "Lexar"
                        },
                        new
                        {
                            ManufacturerId = 40,
                            Categories = "storage",
                            Name = "Toshiba"
                        },
                        new
                        {
                            ManufacturerId = 41,
                            Categories = "storage",
                            Name = "Verbatim"
                        },
                        new
                        {
                            ManufacturerId = 42,
                            Categories = "cooler,powersupply",
                            Name = "Enermax"
                        },
                        new
                        {
                            ManufacturerId = 43,
                            Categories = "cooler,case",
                            Name = "DeepCool"
                        },
                        new
                        {
                            ManufacturerId = 44,
                            Categories = "case,powersupply",
                            Name = "Rosewill"
                        },
                        new
                        {
                            ManufacturerId = 45,
                            Categories = "case,powersupply",
                            Name = "Aerocool"
                        },
                        new
                        {
                            ManufacturerId = 46,
                            Categories = "case,powersupply",
                            Name = "Sharkoon"
                        },
                        new
                        {
                            ManufacturerId = 47,
                            Categories = "powersupply",
                            Name = "Chieftec"
                        },
                        new
                        {
                            ManufacturerId = 48,
                            Categories = "case",
                            Name = "BitFenix"
                        },
                        new
                        {
                            ManufacturerId = 49,
                            Categories = "case,powersupply",
                            Name = "SilverStone Technology"
                        },
                        new
                        {
                            ManufacturerId = 50,
                            Categories = "cooler",
                            Name = "Thermalright"
                        });
                });

            modelBuilder.Entity("CapstoneProject.Models.SupportTables.RamType", b =>
                {
                    b.Property<int>("RamTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RamTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("RamTypeId");

                    b.ToTable("RamTypes");

                    b.HasData(
                        new
                        {
                            RamTypeId = 1,
                            Name = "DDR"
                        },
                        new
                        {
                            RamTypeId = 2,
                            Name = "DDR2"
                        },
                        new
                        {
                            RamTypeId = 3,
                            Name = "DDR3"
                        },
                        new
                        {
                            RamTypeId = 4,
                            Name = "DDR4"
                        },
                        new
                        {
                            RamTypeId = 5,
                            Name = "DDR5"
                        });
                });

            modelBuilder.Entity("CapstoneProject.Models.SupportTables.Socket", b =>
                {
                    b.Property<int>("SocketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SocketId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SocketId");

                    b.ToTable("Sockets");

                    b.HasData(
                        new
                        {
                            SocketId = 1,
                            Name = "LGA1151"
                        },
                        new
                        {
                            SocketId = 2,
                            Name = "LGA1200"
                        },
                        new
                        {
                            SocketId = 3,
                            Name = "LGA1700"
                        },
                        new
                        {
                            SocketId = 4,
                            Name = "LGA2066"
                        },
                        new
                        {
                            SocketId = 5,
                            Name = "LGA2011-v3"
                        },
                        new
                        {
                            SocketId = 6,
                            Name = "AM3+"
                        },
                        new
                        {
                            SocketId = 7,
                            Name = "AM4"
                        },
                        new
                        {
                            SocketId = 8,
                            Name = "AM5"
                        },
                        new
                        {
                            SocketId = 9,
                            Name = "sTRX4"
                        },
                        new
                        {
                            SocketId = 10,
                            Name = "sWRX8"
                        },
                        new
                        {
                            SocketId = 11,
                            Name = "SP3"
                        },
                        new
                        {
                            SocketId = 12,
                            Name = "FM2+"
                        },
                        new
                        {
                            SocketId = 13,
                            Name = "TR4"
                        },
                        new
                        {
                            SocketId = 14,
                            Name = "Socket 939"
                        });
                });

            modelBuilder.Entity("CapstoneProject.Models.SupportTables.StorageType", b =>
                {
                    b.Property<int>("StorageTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StorageTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("StorageTypeId");

                    b.ToTable("StorageTypes");

                    b.HasData(
                        new
                        {
                            StorageTypeId = 1,
                            Name = "HDD"
                        },
                        new
                        {
                            StorageTypeId = 2,
                            Name = "SSD"
                        },
                        new
                        {
                            StorageTypeId = 3,
                            Name = "M.2"
                        },
                        new
                        {
                            StorageTypeId = 4,
                            Name = "U.2"
                        },
                        new
                        {
                            StorageTypeId = 5,
                            Name = "External HDD"
                        },
                        new
                        {
                            StorageTypeId = 6,
                            Name = "External SSD"
                        },
                        new
                        {
                            StorageTypeId = 7,
                            Name = "Hybrid (SSHD)"
                        });
                });

            modelBuilder.Entity("CapstoneProject.Models.UserBuild", b =>
                {
                    b.Property<Guid>("UserBuildId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BuildId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserBuildId");

                    b.HasIndex("BuildId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBuilds");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CapstoneProject.Models.Auth.ApplicationUserRole", b =>
                {
                    b.HasOne("CapstoneProject.Models.Auth.ApplicationRole", "Role")
                        .WithMany("ApplicationUserRole")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CapstoneProject.Models.Auth.ApplicationUser", "User")
                        .WithMany("ApplicationUserRole")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CapstoneProject.Models.Build", b =>
                {
                    b.HasOne("CapstoneProject.Models.Components.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId");

                    b.HasOne("CapstoneProject.Models.Components.CpuCooler", "CpuCooler")
                        .WithMany()
                        .HasForeignKey("CpuCoolerId");

                    b.HasOne("CapstoneProject.Models.Components.Cpu", "Cpu")
                        .WithMany()
                        .HasForeignKey("CpuId");

                    b.HasOne("CapstoneProject.Models.Components.Gpu", "Gpu")
                        .WithMany()
                        .HasForeignKey("GpuId");

                    b.HasOne("CapstoneProject.Models.Components.Motherboard", "Motherboard")
                        .WithMany()
                        .HasForeignKey("MotherboardId");

                    b.HasOne("CapstoneProject.Models.Components.PowerSupply", "PowerSupply")
                        .WithMany()
                        .HasForeignKey("PowerSupplyId");

                    b.HasOne("CapstoneProject.Models.Components.Ram", "Ram")
                        .WithMany()
                        .HasForeignKey("RamId");

                    b.HasOne("CapstoneProject.Models.Components.Storage", "Storage")
                        .WithMany()
                        .HasForeignKey("StorageId");

                    b.Navigation("Case");

                    b.Navigation("Cpu");

                    b.Navigation("CpuCooler");

                    b.Navigation("Gpu");

                    b.Navigation("Motherboard");

                    b.Navigation("PowerSupply");

                    b.Navigation("Ram");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("CapstoneProject.Models.Components.Case", b =>
                {
                    b.HasOne("CapstoneProject.Models.SupportTables.FormFactor", "FormFactor")
                        .WithMany("Cases")
                        .HasForeignKey("FormFactorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CapstoneProject.Models.SupportTables.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormFactor");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("CapstoneProject.Models.Components.Cpu", b =>
                {
                    b.HasOne("CapstoneProject.Models.SupportTables.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CapstoneProject.Models.SupportTables.Socket", "Socket")
                        .WithMany("Cpus")
                        .HasForeignKey("SocketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacturer");

                    b.Navigation("Socket");
                });

            modelBuilder.Entity("CapstoneProject.Models.Components.CpuCooler", b =>
                {
                    b.HasOne("CapstoneProject.Models.SupportTables.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("CapstoneProject.Models.Components.Gpu", b =>
                {
                    b.HasOne("CapstoneProject.Models.SupportTables.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("CapstoneProject.Models.Components.Motherboard", b =>
                {
                    b.HasOne("CapstoneProject.Models.SupportTables.FormFactor", "FormFactor")
                        .WithMany("Motherboards")
                        .HasForeignKey("FormFactorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CapstoneProject.Models.SupportTables.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CapstoneProject.Models.SupportTables.RamType", "RamType")
                        .WithMany("Motherboards")
                        .HasForeignKey("RamTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CapstoneProject.Models.SupportTables.Socket", "Socket")
                        .WithMany("Motherboards")
                        .HasForeignKey("SocketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormFactor");

                    b.Navigation("Manufacturer");

                    b.Navigation("RamType");

                    b.Navigation("Socket");
                });

            modelBuilder.Entity("CapstoneProject.Models.Components.PowerSupply", b =>
                {
                    b.HasOne("CapstoneProject.Models.SupportTables.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("CapstoneProject.Models.Components.Ram", b =>
                {
                    b.HasOne("CapstoneProject.Models.SupportTables.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CapstoneProject.Models.SupportTables.RamType", "RamType")
                        .WithMany("Rams")
                        .HasForeignKey("RamTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacturer");

                    b.Navigation("RamType");
                });

            modelBuilder.Entity("CapstoneProject.Models.Components.Storage", b =>
                {
                    b.HasOne("CapstoneProject.Models.SupportTables.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CapstoneProject.Models.SupportTables.StorageType", "StorageType")
                        .WithMany("Storages")
                        .HasForeignKey("StorageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacturer");

                    b.Navigation("StorageType");
                });

            modelBuilder.Entity("CapstoneProject.Models.SharedBuild", b =>
                {
                    b.HasOne("CapstoneProject.Models.UserBuild", "UserBuild")
                        .WithMany()
                        .HasForeignKey("UserBuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserBuild");
                });

            modelBuilder.Entity("CapstoneProject.Models.SupportTables.CpuCoolerSocket", b =>
                {
                    b.HasOne("CapstoneProject.Models.Components.CpuCooler", "CpuCooler")
                        .WithMany("CpuCoolerSockets")
                        .HasForeignKey("CpuCoolerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CapstoneProject.Models.SupportTables.Socket", "Socket")
                        .WithMany("CpuCoolerSockets")
                        .HasForeignKey("SocketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CpuCooler");

                    b.Navigation("Socket");
                });

            modelBuilder.Entity("CapstoneProject.Models.UserBuild", b =>
                {
                    b.HasOne("CapstoneProject.Models.Build", "Build")
                        .WithMany("UserBuilds")
                        .HasForeignKey("BuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CapstoneProject.Models.Auth.ApplicationUser", "User")
                        .WithMany("UserBuilds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Build");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("CapstoneProject.Models.Auth.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CapstoneProject.Models.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CapstoneProject.Models.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CapstoneProject.Models.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CapstoneProject.Models.Auth.ApplicationRole", b =>
                {
                    b.Navigation("ApplicationUserRole");
                });

            modelBuilder.Entity("CapstoneProject.Models.Auth.ApplicationUser", b =>
                {
                    b.Navigation("ApplicationUserRole");

                    b.Navigation("UserBuilds");
                });

            modelBuilder.Entity("CapstoneProject.Models.Build", b =>
                {
                    b.Navigation("UserBuilds");
                });

            modelBuilder.Entity("CapstoneProject.Models.Components.CpuCooler", b =>
                {
                    b.Navigation("CpuCoolerSockets");
                });

            modelBuilder.Entity("CapstoneProject.Models.SupportTables.FormFactor", b =>
                {
                    b.Navigation("Cases");

                    b.Navigation("Motherboards");
                });

            modelBuilder.Entity("CapstoneProject.Models.SupportTables.RamType", b =>
                {
                    b.Navigation("Motherboards");

                    b.Navigation("Rams");
                });

            modelBuilder.Entity("CapstoneProject.Models.SupportTables.Socket", b =>
                {
                    b.Navigation("CpuCoolerSockets");

                    b.Navigation("Cpus");

                    b.Navigation("Motherboards");
                });

            modelBuilder.Entity("CapstoneProject.Models.SupportTables.StorageType", b =>
                {
                    b.Navigation("Storages");
                });
#pragma warning restore 612, 618
        }
    }
}
